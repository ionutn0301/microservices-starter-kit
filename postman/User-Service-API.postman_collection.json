{
  "info": {
    "name": "User Service API",
    "description": "User management microservice for the microservices starter kit",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3002"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string",
      "description": "JWT access token from auth service"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string",
      "description": "Current user ID"
    },
    {
      "key": "admin_token",
      "value": "",
      "type": "string",
      "description": "Admin JWT token for admin endpoints"
    }
  ],
  "item": [
    {
      "name": "User Profile Management",
      "item": [
        {
          "name": "Create Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Profile created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('lastName');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phoneNumber\": \"+1234567890\",\n  \"dateOfBirth\": \"1990-01-15\",\n  \"bio\": \"Software developer with 5 years of experience\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            },
            "description": "Create a new user profile"
          }
        },
        {
          "name": "Get Current Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile retrieved successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('userId');",
                  "    pm.expect(responseJson.data).to.have.property('firstName');",
                  "    pm.expect(responseJson.data).to.have.property('lastName');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            },
            "description": "Get current user's profile"
          }
        },
        {
          "name": "Update Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('updatedAt');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"phoneNumber\": \"+1234567891\",\n  \"bio\": \"Updated bio - Senior software developer\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            },
            "description": "Update current user's profile"
          }
        },
        {
          "name": "Delete Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/profile",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile"]
            },
            "description": "Delete current user's profile"
          }
        },
        {
          "name": "Get Profile by ID (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile retrieved by ID', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('userId');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/profile/{{user_id}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "profile", "{{user_id}}"]
            },
            "description": "Get user profile by ID (Admin only)"
          }
        }
      ],
      "description": "User profile CRUD operations"
    },
    {
      "name": "Address Management",
      "item": [
        {
          "name": "Create/Update Address",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Address created successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('street');",
                  "    pm.expect(responseJson.data).to.have.property('city');",
                  "    pm.expect(responseJson.data).to.have.property('country');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"street\": \"123 Main Street\",\n  \"city\": \"New York\",\n  \"state\": \"NY\",\n  \"country\": \"USA\",\n  \"postalCode\": \"10001\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/address",
              "host": ["{{baseUrl}}"],
              "path": ["users", "address"]
            },
            "description": "Create or update user address"
          }
        },
        {
          "name": "Get Address",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Address retrieved successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('street');",
                  "    pm.expect(responseJson.data).to.have.property('city');",
                  "    pm.expect(responseJson.data).to.have.property('postalCode');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/address",
              "host": ["{{baseUrl}}"],
              "path": ["users", "address"]
            },
            "description": "Get current user's address"
          }
        },
        {
          "name": "Delete Address",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/address",
              "host": ["{{baseUrl}}"],
              "path": ["users", "address"]
            },
            "description": "Delete current user's address"
          }
        }
      ],
      "description": "User address management"
    },
    {
      "name": "User Preferences",
      "item": [
        {
          "name": "Update Preferences",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Preferences updated successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('theme');",
                  "    pm.expect(responseJson.data).to.have.property('language');",
                  "    pm.expect(responseJson.data).to.have.property('timezone');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"theme\": \"DARK\",\n  \"language\": \"en\",\n  \"timezone\": \"America/New_York\",\n  \"emailNotifications\": true,\n  \"pushNotifications\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/preferences",
              "host": ["{{baseUrl}}"],
              "path": ["users", "preferences"]
            },
            "description": "Update user preferences"
          }
        },
        {
          "name": "Get Preferences",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Preferences retrieved successfully', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('theme');",
                  "    pm.expect(responseJson.data).to.have.property('language');",
                  "    pm.expect(responseJson.data).to.have.property('emailNotifications');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/preferences",
              "host": ["{{baseUrl}}"],
              "path": ["users", "preferences"]
            },
            "description": "Get current user's preferences"
          }
        }
      ],
      "description": "User preferences management"
    },
    {
      "name": "Admin Operations",
      "item": [
        {
          "name": "Get All Profiles",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profiles list retrieved', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('data');",
                  "    pm.expect(responseJson.data).to.have.property('total');",
                  "    pm.expect(responseJson.data).to.have.property('page');",
                  "    pm.expect(responseJson.data).to.have.property('limit');",
                  "    pm.expect(responseJson.data.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["users"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get all user profiles with pagination (Admin only)"
          }
        },
        {
          "name": "Search Profiles",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Search results retrieved', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/search?q=john",
              "host": ["{{baseUrl}}"],
              "path": ["users", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "john"
                }
              ]
            },
            "description": "Search user profiles by query (Admin only)"
          }
        }
      ],
      "description": "Admin-only operations"
    },
    {
      "name": "Health",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Service is healthy', function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data.status).to.equal('ok');",
                  "    pm.expect(responseJson.data.service).to.equal('user-service');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/health",
              "host": ["{{baseUrl}}"],
              "path": ["users", "health"]
            },
            "description": "Check if the user service is healthy"
          }
        }
      ],
      "description": "Health check endpoints"
    }
  ]
}
